/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "getFinalAllocation(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDirectDonations(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getUniqueDonations(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getDonators(uint64)address[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createProposal(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distribute()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "allocate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "donate(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMucXVhZHJhdGljX2Z1bmRpbmcuY29udHJhY3QuUXVhZHJhdGljRnVuZGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "index": {
          "type": "uint64",
          "key": "index"
        },
        "totalFunds": {
          "type": "uint64",
          "key": "totalFunds"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "QuadraticFunding",
    "methods": [
      {
        "name": "getFinalAllocation",
        "args": [
          {
            "type": "uint64",
            "name": "proposalId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDirectDonations",
        "args": [
          {
            "type": "uint64",
            "name": "proposalId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getUniqueDonations",
        "args": [
          {
            "type": "uint64",
            "name": "proposalId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getDonators",
        "args": [
          {
            "type": "uint64",
            "name": "proposalId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "address[]"
        }
      },
      {
        "name": "createProposal",
        "args": [
          {
            "type": "account",
            "name": "payoutAddress"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "distribute",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "allocate",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "donate",
        "args": [
          {
            "type": "uint64",
            "name": "proposalId"
          },
          {
            "type": "uint64",
            "name": "amountMicroAlgo"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the QuadraticFunding smart contract.
 */
export type QuadraticFunding = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getFinalAllocation(uint64)uint64' | 'getFinalAllocation', {
      argsObj: {
        proposalId: bigint | number
      }
      argsTuple: [proposalId: bigint | number]
      returns: bigint
    }>
    & Record<'getDirectDonations(uint64)uint64' | 'getDirectDonations', {
      argsObj: {
        proposalId: bigint | number
      }
      argsTuple: [proposalId: bigint | number]
      returns: bigint
    }>
    & Record<'getUniqueDonations(uint64)uint64' | 'getUniqueDonations', {
      argsObj: {
        proposalId: bigint | number
      }
      argsTuple: [proposalId: bigint | number]
      returns: bigint
    }>
    & Record<'getDonators(uint64)address[]' | 'getDonators', {
      argsObj: {
        proposalId: bigint | number
      }
      argsTuple: [proposalId: bigint | number]
      returns: string[]
    }>
    & Record<'createProposal(account)void' | 'createProposal', {
      argsObj: {
        payoutAddress: string | Uint8Array
      }
      argsTuple: [payoutAddress: string | Uint8Array]
      returns: void
    }>
    & Record<'distribute()void' | 'distribute', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'allocate()void' | 'allocate', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'donate(uint64,uint64)void' | 'donate', {
      argsObj: {
        proposalId: bigint | number
        amountMicroAlgo: bigint | number
      }
      argsTuple: [proposalId: bigint | number, amountMicroAlgo: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      index?: IntegerState
      totalFunds?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type QuadraticFundingSig = keyof QuadraticFunding['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends QuadraticFundingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the QuadraticFunding smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends QuadraticFundingSig> = QuadraticFunding['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the QuadraticFunding smart contract to the method's return type
 */
export type MethodReturn<TSignature extends QuadraticFundingSig> = QuadraticFunding['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type QuadraticFundingCreateCalls = (typeof QuadraticFundingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type QuadraticFundingCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type QuadraticFundingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: QuadraticFundingCreateCalls) => QuadraticFundingCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class QuadraticFundingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the QuadraticFunding smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getFinalAllocation(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFinalAllocation(args: MethodArgs<'getFinalAllocation(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getFinalAllocation(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getDirectDonations(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDirectDonations(args: MethodArgs<'getDirectDonations(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getDirectDonations(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getUniqueDonations(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getUniqueDonations(args: MethodArgs<'getUniqueDonations(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getUniqueDonations(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getDonators(uint64)address[] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getDonators(args: MethodArgs<'getDonators(uint64)address[]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getDonators(uint64)address[]' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createProposal(account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProposal(args: MethodArgs<'createProposal(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createProposal(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payoutAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the distribute()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static distribute(args: MethodArgs<'distribute()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'distribute()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the allocate()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static allocate(args: MethodArgs<'allocate()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'allocate()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the donate(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static donate(args: MethodArgs<'donate(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'donate(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalId, args.amountMicroAlgo],
      ...params,
    }
  }
}

/**
 * A client to make calls to the QuadraticFunding smart contract
 */
export class QuadraticFundingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `QuadraticFundingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof QuadraticFunding['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the QuadraticFunding smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: QuadraticFundingDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(QuadraticFundingCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the QuadraticFunding smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the QuadraticFunding smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getFinalAllocation(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFinalAllocation(args: MethodArgs<'getFinalAllocation(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.getFinalAllocation(args, params))
  }

  /**
   * Calls the getDirectDonations(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getDirectDonations(args: MethodArgs<'getDirectDonations(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.getDirectDonations(args, params))
  }

  /**
   * Calls the getUniqueDonations(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getUniqueDonations(args: MethodArgs<'getUniqueDonations(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.getUniqueDonations(args, params))
  }

  /**
   * Calls the getDonators(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getDonators(args: MethodArgs<'getDonators(uint64)address[]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.getDonators(args, params))
  }

  /**
   * Calls the createProposal(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProposal(args: MethodArgs<'createProposal(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.createProposal(args, params))
  }

  /**
   * Calls the distribute()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public distribute(args: MethodArgs<'distribute()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.distribute(args, params))
  }

  /**
   * Calls the allocate()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public allocate(args: MethodArgs<'allocate()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.allocate(args, params))
  }

  /**
   * Calls the donate(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public donate(args: MethodArgs<'donate(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuadraticFundingCallFactory.donate(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<QuadraticFunding['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get index() {
        return QuadraticFundingClient.getIntegerState(state, 'index')
      },
      get totalFunds() {
        return QuadraticFundingClient.getIntegerState(state, 'totalFunds')
      },
    }
  }

  public compose(): QuadraticFundingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getFinalAllocation(args: MethodArgs<'getFinalAllocation(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getFinalAllocation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDirectDonations(args: MethodArgs<'getDirectDonations(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDirectDonations(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getUniqueDonations(args: MethodArgs<'getUniqueDonations(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getUniqueDonations(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getDonators(args: MethodArgs<'getDonators(uint64)address[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getDonators(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createProposal(args: MethodArgs<'createProposal(account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      distribute(args: MethodArgs<'distribute()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.distribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      allocate(args: MethodArgs<'allocate()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.allocate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      donate(args: MethodArgs<'donate(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.donate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as QuadraticFundingComposer
  }
}
export type QuadraticFundingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getFinalAllocation(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFinalAllocation(args: MethodArgs<'getFinalAllocation(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'getFinalAllocation(uint64)uint64'>]>

  /**
   * Calls the getDirectDonations(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDirectDonations(args: MethodArgs<'getDirectDonations(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'getDirectDonations(uint64)uint64'>]>

  /**
   * Calls the getUniqueDonations(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUniqueDonations(args: MethodArgs<'getUniqueDonations(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'getUniqueDonations(uint64)uint64'>]>

  /**
   * Calls the getDonators(uint64)address[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDonators(args: MethodArgs<'getDonators(uint64)address[]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'getDonators(uint64)address[]'>]>

  /**
   * Calls the createProposal(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(args: MethodArgs<'createProposal(account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'createProposal(account)void'>]>

  /**
   * Calls the distribute()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distribute(args: MethodArgs<'distribute()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'distribute()void'>]>

  /**
   * Calls the allocate()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  allocate(args: MethodArgs<'allocate()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'allocate()void'>]>

  /**
   * Calls the donate(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(args: MethodArgs<'donate(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, MethodReturn<'donate(uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the QuadraticFunding smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): QuadraticFundingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): QuadraticFundingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<QuadraticFundingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<QuadraticFundingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type QuadraticFundingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type QuadraticFundingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
