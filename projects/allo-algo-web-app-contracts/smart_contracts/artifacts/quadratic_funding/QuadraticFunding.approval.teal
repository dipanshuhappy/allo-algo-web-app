#pragma version 10

smart_contracts.quadratic_funding.contract.QuadraticFunding.approval_program:
    intcblock 0 1 48 32
    bytecblock "proposals" "index" "totalFunds" 0x151f7c75 0x0000000000000000
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.quadratic_funding.contract.QuadraticFunding.__init__() -> void:
__init__:
    proto 0 0
    bytec_2 // "totalFunds"
    intc_0 // 0
    app_global_put
    bytec_1 // "index"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@12
    pushbytess 0x955c9df5 0x2cd8af54 0xd6f7e6d8 0x989c11d9 0x5fc7c340 0x7f3a60d1 0xa8766e65 0x423254c3 // method "getFinalAllocation(uint64)uint64", method "getDirectDonations(uint64)uint64", method "getUniqueDonations(uint64)uint64", method "getDonators(uint64)address[]", method "createProposal(account)void", method "distribute()void", method "allocate()void", method "donate(uint64,uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___getFinalAllocation_route@2 __puya_arc4_router___getDirectDonations_route@3 __puya_arc4_router___getUniqueDonations_route@4 __puya_arc4_router___getDonators_route@5 __puya_arc4_router___createProposal_route@6 __puya_arc4_router___distribute_route@7 __puya_arc4_router___allocate_route@8 __puya_arc4_router___donate_route@9
    intc_0 // 0
    retsub

__puya_arc4_router___getFinalAllocation_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub getFinalAllocation
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___getDirectDonations_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub getDirectDonations
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___getUniqueDonations_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub getUniqueDonations
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___getDonators_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub getDonators
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___createProposal_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub createProposal
    intc_1 // 1
    retsub

__puya_arc4_router___distribute_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub distribute
    intc_1 // 1
    retsub

__puya_arc4_router___allocate_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub allocate
    intc_1 // 1
    retsub

__puya_arc4_router___donate_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub donate
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@12:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@16:
    intc_0 // 0
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.getFinalAllocation(proposalId: uint64) -> uint64:
getFinalAllocation:
    proto 1 1
    frame_dig -1
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    extract 50 8 // on error: Index access is out of bounds
    btoi
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.getDirectDonations(proposalId: uint64) -> uint64:
getDirectDonations:
    proto 1 1
    frame_dig -1
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    extract 40 8 // on error: Index access is out of bounds
    btoi
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.getUniqueDonations(proposalId: uint64) -> uint64:
getUniqueDonations:
    proto 1 1
    frame_dig -1
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    extract 32 8 // on error: Index access is out of bounds
    btoi
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.getDonators(proposalId: uint64) -> bytes:
getDonators:
    proto 1 1
    frame_dig -1
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    dup
    intc_2 // 48
    extract_uint16
    dig 1
    len
    substring3
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.createProposal(payoutAddress: bytes) -> void:
createProposal:
    proto 1 0
    frame_dig -1
    bytec 4 // 0x0000000000000000
    concat
    bytec 4 // 0x0000000000000000
    concat
    pushbytes 0x003a
    concat
    bytec 4 // 0x0000000000000000
    concat
    pushbytes 0x0000
    concat
    intc_0 // 0
    bytec_1 // "index"
    app_global_get_ex
    assert // check self.index exists
    itob
    bytec_0 // "proposals"
    swap
    concat
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 0
    bytec_1 // "index"
    app_global_get_ex
    assert // check self.index exists
    intc_1 // 1
    +
    bytec_1 // "index"
    swap
    app_global_put
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.distribute() -> void:
distribute:
    proto 0 0
    intc_0 // 0
    bytec_1 // "index"
    app_global_get_ex
    assert // check self.index exists
    intc_0 // 0

distribute_for_header@1:
    frame_dig 1
    frame_dig 0
    <
    bz distribute_after_for@5
    frame_dig 1
    dup
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    dup
    extract 50 8 // on error: Index access is out of bounds
    btoi
    swap
    extract 0 32 // on error: Index access is out of bounds
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    intc_1 // pay
    itxn_field TypeEnum
    pushint 1000 // 1000
    itxn_field Fee
    itxn_submit
    intc_1 // 1
    +
    frame_bury 1
    b distribute_for_header@1

distribute_after_for@5:
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.allocate() -> void:
allocate:
    proto 0 0
    pushbytes ""
    intc_0 // 0
    dup
    bytec_1 // "index"
    app_global_get_ex
    assert // check self.index exists
    intc_0 // 0

allocate_for_header@1:
    frame_dig 3
    frame_dig 2
    <
    bz allocate_after_for@4
    frame_dig 3
    dup
    itob
    bytec_0 // "proposals"
    swap
    concat
    box_get
    assert // check self.proposals entry exists
    extract 40 8 // on error: Index access is out of bounds
    btoi
    sqrt
    frame_dig 1
    +
    frame_bury 1
    intc_1 // 1
    +
    frame_bury 3
    b allocate_for_header@1

allocate_after_for@4:
    intc_0 // 0
    bytec_1 // "index"
    app_global_get_ex
    swap
    frame_bury 0
    assert // check self.index exists
    intc_0 // 0
    frame_bury 3

allocate_for_header@5:
    frame_dig 3
    frame_dig 0
    <
    bz allocate_after_for@8
    frame_dig 3
    dup
    itob
    bytec_0 // "proposals"
    swap
    concat
    dup
    box_get
    assert // check self.proposals entry exists
    dup
    extract 40 8 // on error: Index access is out of bounds
    btoi
    sqrt
    intc_0 // 0
    bytec_2 // "totalFunds"
    app_global_get_ex
    assert // check self.totalFunds exists
    *
    frame_dig 1
    /
    itob
    btoi
    itob
    replace2 50
    dig 1
    box_del
    pop
    box_put
    intc_1 // 1
    +
    frame_bury 3
    b allocate_for_header@5

allocate_after_for@8:
    bytec_2 // "totalFunds"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.quadratic_funding.contract.QuadraticFunding.donate(proposalId: uint64, amountMicroAlgo: uint64) -> void:
donate:
    proto 2 0
    frame_dig -2
    itob
    bytec_0 // "proposals"
    swap
    concat
    dup
    box_get
    swap
    dup
    uncover 2
    assert // check self.proposals entry exists
    txn Sender
    dup
    uncover 2
    dup
    intc_2 // 48
    extract_uint16
    dig 1
    len
    dig 2
    cover 2
    substring3
    uncover 2
    callsub value_exists
    pop
    bz donate_after_if_else@2
    frame_dig 1
    dup
    extract 32 8 // on error: Index access is out of bounds
    btoi
    intc_1 // 1
    +
    itob
    replace2 32
    dup
    intc_2 // 48
    extract_uint16
    dig 1
    len
    dig 2
    dig 2
    uncover 2
    substring3
    extract 2 0
    frame_dig 2
    concat
    dup
    len
    intc_3 // 32
    /
    itob
    extract 6 2
    swap
    concat
    uncover 2
    intc_0 // 0
    uncover 3
    extract3
    swap
    concat
    frame_bury 3

donate_after_if_else@2:
    frame_dig 3
    dup
    extract 40 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    +
    itob
    replace2 40
    intc_0 // 0
    bytec_2 // "totalFunds"
    app_global_get_ex
    assert // check self.totalFunds exists
    frame_dig -1
    +
    bytec_2 // "totalFunds"
    swap
    app_global_put
    frame_dig 0
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts.quadratic_funding.contract.value_exists(array: bytes, value: bytes) -> uint64, bytes:
value_exists:
    proto 2 2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_0 // 0

value_exists_for_header@1:
    frame_dig 1
    frame_dig 0
    <
    bz value_exists_after_for@6
    frame_dig -2
    extract 2 0
    frame_dig 1
    intc_3 // 32
    *
    intc_3 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig -1
    ==
    bz value_exists_after_if_else@4
    intc_1 // 1
    frame_dig -2
    uncover 3
    uncover 3
    retsub

value_exists_after_if_else@4:
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b value_exists_for_header@1

value_exists_after_for@6:
    intc_0 // 0
    frame_dig -2
    uncover 3
    uncover 3
    retsub
