/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "initializeVariables(address,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAlloContractId()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStrategyId()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isPoolActive()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "baseStrategy_init(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "increasePoolAmount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerRecipient(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "beforeRegisterRecipient(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "afterRegisterRecipient(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_Recipient(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "allocate(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "beforeAllocate(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "afterAllocate(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "Allocate(byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distribute(address[],byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "beforeDistribute(address[],byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "afterDistribute(address[],byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "Distribute(address[],byte[],account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPayOut(address,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYmFzZV9zdHJhdGVneS5jb250cmFjdC5CYXNlU3RyYXRlZ3kuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "alloContractId": {
          "type": "bytes",
          "key": "alloContractId"
        },
        "poolActive": {
          "type": "uint64",
          "key": "poolActive"
        },
        "poolAmount": {
          "type": "uint64",
          "key": "poolAmount"
        },
        "poolId": {
          "type": "uint64",
          "key": "poolId"
        },
        "strategyId": {
          "type": "bytes",
          "key": "strategyId"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "BaseStrategy",
    "methods": [
      {
        "name": "initializeVariables",
        "args": [
          {
            "type": "address",
            "name": "_alloContractId"
          },
          {
            "type": "string",
            "name": "_strategyId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAlloContractId",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "getPoolId",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getStrategyId",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "getPoolAmount",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "isPoolActive",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "baseStrategy_init",
        "args": [
          {
            "type": "uint64",
            "name": "_poolId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "increasePoolAmount",
        "args": [
          {
            "type": "uint64",
            "name": "_amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerRecipient",
        "args": [
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "beforeRegisterRecipient",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "afterRegisterRecipient",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register_Recipient",
        "args": [
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "allocate",
        "args": [
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "beforeAllocate",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "afterAllocate",
        "args": [
          {
            "type": "byte[]",
            "name": "data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "Allocate",
        "args": [
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "distribute",
        "args": [
          {
            "type": "address[]",
            "name": "_recipientIds"
          },
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "beforeDistribute",
        "args": [
          {
            "type": "address[]",
            "name": "_recipientIds"
          },
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "afterDistribute",
        "args": [
          {
            "type": "address[]",
            "name": "_recipientIds"
          },
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "Distribute",
        "args": [
          {
            "type": "address[]",
            "name": "_recipientIds"
          },
          {
            "type": "byte[]",
            "name": "_data"
          },
          {
            "type": "account",
            "name": "_sender"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPayOut",
        "args": [
          {
            "type": "address",
            "name": "_recipientIds"
          },
          {
            "type": "byte[]",
            "name": "_data"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the BaseStrategy smart contract.
 */
export type BaseStrategy = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initializeVariables(address,string)void' | 'initializeVariables', {
      argsObj: {
        alloContractId: string
        strategyId: string
      }
      argsTuple: [alloContractId: string, strategyId: string]
      returns: void
    }>
    & Record<'getAlloContractId()address' | 'getAlloContractId', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'getPoolId()uint64' | 'getPoolId', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getStrategyId()string' | 'getStrategyId', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'getPoolAmount()uint64' | 'getPoolAmount', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'isPoolActive()bool' | 'isPoolActive', {
      argsObj: {
      }
      argsTuple: []
      returns: boolean
    }>
    & Record<'baseStrategy_init(uint64)void' | 'baseStrategy_init', {
      argsObj: {
        poolId: bigint | number
      }
      argsTuple: [poolId: bigint | number]
      returns: void
    }>
    & Record<'increasePoolAmount(uint64)void' | 'increasePoolAmount', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: void
    }>
    & Record<'registerRecipient(byte[],account)void' | 'registerRecipient', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'beforeRegisterRecipient(byte[],account)void' | 'beforeRegisterRecipient', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'afterRegisterRecipient(byte[],account)void' | 'afterRegisterRecipient', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'register_Recipient(byte[],account)void' | 'register_Recipient', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'allocate(byte[],account)void' | 'allocate', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'beforeAllocate(byte[],account)void' | 'beforeAllocate', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'afterAllocate(byte[],account)void' | 'afterAllocate', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'Allocate(byte[],account)void' | 'Allocate', {
      argsObj: {
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'distribute(address[],byte[],account)void' | 'distribute', {
      argsObj: {
        recipientIds: string[]
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [recipientIds: string[], data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'beforeDistribute(address[],byte[],account)void' | 'beforeDistribute', {
      argsObj: {
        recipientIds: string[]
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [recipientIds: string[], data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'afterDistribute(address[],byte[],account)void' | 'afterDistribute', {
      argsObj: {
        recipientIds: string[]
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [recipientIds: string[], data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'Distribute(address[],byte[],account)void' | 'Distribute', {
      argsObj: {
        recipientIds: string[]
        data: Uint8Array
        sender: string | Uint8Array
      }
      argsTuple: [recipientIds: string[], data: Uint8Array, sender: string | Uint8Array]
      returns: void
    }>
    & Record<'getPayOut(address,byte[])void' | 'getPayOut', {
      argsObj: {
        recipientIds: string
        data: Uint8Array
      }
      argsTuple: [recipientIds: string, data: Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      alloContractId?: BinaryState
      poolActive?: IntegerState
      poolAmount?: IntegerState
      poolId?: IntegerState
      strategyId?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BaseStrategySig = keyof BaseStrategy['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BaseStrategySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BaseStrategy smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BaseStrategySig> = BaseStrategy['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BaseStrategy smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BaseStrategySig> = BaseStrategy['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BaseStrategyCreateCalls = (typeof BaseStrategyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BaseStrategyCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type BaseStrategyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BaseStrategyCreateCalls) => BaseStrategyCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BaseStrategyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BaseStrategy smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initializeVariables(address,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initializeVariables(args: MethodArgs<'initializeVariables(address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initializeVariables(address,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.alloContractId, args.strategyId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAlloContractId()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAlloContractId(args: MethodArgs<'getAlloContractId()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAlloContractId()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPoolId()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPoolId(args: MethodArgs<'getPoolId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPoolId()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getStrategyId()string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStrategyId(args: MethodArgs<'getStrategyId()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getStrategyId()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPoolAmount()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPoolAmount(args: MethodArgs<'getPoolAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPoolAmount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the isPoolActive()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isPoolActive(args: MethodArgs<'isPoolActive()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'isPoolActive()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the baseStrategy_init(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static baseStrategyInit(args: MethodArgs<'baseStrategy_init(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'baseStrategy_init(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the increasePoolAmount(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static increasePoolAmount(args: MethodArgs<'increasePoolAmount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'increasePoolAmount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerRecipient(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerRecipient(args: MethodArgs<'registerRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerRecipient(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the beforeRegisterRecipient(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static beforeRegisterRecipient(args: MethodArgs<'beforeRegisterRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'beforeRegisterRecipient(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the afterRegisterRecipient(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static afterRegisterRecipient(args: MethodArgs<'afterRegisterRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'afterRegisterRecipient(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_Recipient(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerRecipient(args: MethodArgs<'register_Recipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_Recipient(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the allocate(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static allocate(args: MethodArgs<'allocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'allocate(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the beforeAllocate(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static beforeAllocate(args: MethodArgs<'beforeAllocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'beforeAllocate(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the afterAllocate(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static afterAllocate(args: MethodArgs<'afterAllocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'afterAllocate(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the Allocate(byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static allocate(args: MethodArgs<'Allocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'Allocate(byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the distribute(address[],byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static distribute(args: MethodArgs<'distribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'distribute(address[],byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipientIds, args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the beforeDistribute(address[],byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static beforeDistribute(args: MethodArgs<'beforeDistribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'beforeDistribute(address[],byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipientIds, args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the afterDistribute(address[],byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static afterDistribute(args: MethodArgs<'afterDistribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'afterDistribute(address[],byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipientIds, args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the Distribute(address[],byte[],account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static distribute(args: MethodArgs<'Distribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'Distribute(address[],byte[],account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipientIds, args.data, args.sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPayOut(address,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPayOut(args: MethodArgs<'getPayOut(address,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPayOut(address,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipientIds, args.data],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BaseStrategy smart contract
 */
export class BaseStrategyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BaseStrategyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BaseStrategy['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BaseStrategy smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BaseStrategyDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BaseStrategyCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BaseStrategy smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BaseStrategy smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initializeVariables(address,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initializeVariables(args: MethodArgs<'initializeVariables(address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.initializeVariables(args, params))
  }

  /**
   * Calls the getAlloContractId()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAlloContractId(args: MethodArgs<'getAlloContractId()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.getAlloContractId(args, params))
  }

  /**
   * Calls the getPoolId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPoolId(args: MethodArgs<'getPoolId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.getPoolId(args, params))
  }

  /**
   * Calls the getStrategyId()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStrategyId(args: MethodArgs<'getStrategyId()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.getStrategyId(args, params))
  }

  /**
   * Calls the getPoolAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPoolAmount(args: MethodArgs<'getPoolAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.getPoolAmount(args, params))
  }

  /**
   * Calls the isPoolActive()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public isPoolActive(args: MethodArgs<'isPoolActive()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.isPoolActive(args, params))
  }

  /**
   * Calls the baseStrategy_init(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public baseStrategyInit(args: MethodArgs<'baseStrategy_init(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.baseStrategyInit(args, params))
  }

  /**
   * Calls the increasePoolAmount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public increasePoolAmount(args: MethodArgs<'increasePoolAmount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.increasePoolAmount(args, params))
  }

  /**
   * Calls the registerRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerRecipient(args: MethodArgs<'registerRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.registerRecipient(args, params))
  }

  /**
   * Calls the beforeRegisterRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public beforeRegisterRecipient(args: MethodArgs<'beforeRegisterRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.beforeRegisterRecipient(args, params))
  }

  /**
   * Calls the afterRegisterRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public afterRegisterRecipient(args: MethodArgs<'afterRegisterRecipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.afterRegisterRecipient(args, params))
  }

  /**
   * Calls the register_Recipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerRecipient(args: MethodArgs<'register_Recipient(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.registerRecipient(args, params))
  }

  /**
   * Calls the allocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public allocate(args: MethodArgs<'allocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.allocate(args, params))
  }

  /**
   * Calls the beforeAllocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public beforeAllocate(args: MethodArgs<'beforeAllocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.beforeAllocate(args, params))
  }

  /**
   * Calls the afterAllocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public afterAllocate(args: MethodArgs<'afterAllocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.afterAllocate(args, params))
  }

  /**
   * Calls the Allocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public allocate(args: MethodArgs<'Allocate(byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.allocate(args, params))
  }

  /**
   * Calls the distribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public distribute(args: MethodArgs<'distribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.distribute(args, params))
  }

  /**
   * Calls the beforeDistribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public beforeDistribute(args: MethodArgs<'beforeDistribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.beforeDistribute(args, params))
  }

  /**
   * Calls the afterDistribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public afterDistribute(args: MethodArgs<'afterDistribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.afterDistribute(args, params))
  }

  /**
   * Calls the Distribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public distribute(args: MethodArgs<'Distribute(address[],byte[],account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.distribute(args, params))
  }

  /**
   * Calls the getPayOut(address,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPayOut(args: MethodArgs<'getPayOut(address,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BaseStrategyCallFactory.getPayOut(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BaseStrategy['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get alloContractId() {
        return BaseStrategyClient.getBinaryState(state, 'alloContractId')
      },
      get poolActive() {
        return BaseStrategyClient.getIntegerState(state, 'poolActive')
      },
      get poolAmount() {
        return BaseStrategyClient.getIntegerState(state, 'poolAmount')
      },
      get poolId() {
        return BaseStrategyClient.getIntegerState(state, 'poolId')
      },
      get strategyId() {
        return BaseStrategyClient.getBinaryState(state, 'strategyId')
      },
    }
  }

  public compose(): BaseStrategyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initializeVariables(args: MethodArgs<'initializeVariables(address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initializeVariables(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAlloContractId(args: MethodArgs<'getAlloContractId()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAlloContractId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPoolId(args: MethodArgs<'getPoolId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPoolId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStrategyId(args: MethodArgs<'getStrategyId()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStrategyId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPoolAmount(args: MethodArgs<'getPoolAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPoolAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      isPoolActive(args: MethodArgs<'isPoolActive()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isPoolActive(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      baseStrategyInit(args: MethodArgs<'baseStrategy_init(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.baseStrategyInit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      increasePoolAmount(args: MethodArgs<'increasePoolAmount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.increasePoolAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerRecipient(args: MethodArgs<'registerRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerRecipient(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      beforeRegisterRecipient(args: MethodArgs<'beforeRegisterRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.beforeRegisterRecipient(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      afterRegisterRecipient(args: MethodArgs<'afterRegisterRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.afterRegisterRecipient(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerRecipient(args: MethodArgs<'register_Recipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerRecipient(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      allocate(args: MethodArgs<'allocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.allocate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      beforeAllocate(args: MethodArgs<'beforeAllocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.beforeAllocate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      afterAllocate(args: MethodArgs<'afterAllocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.afterAllocate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      allocate(args: MethodArgs<'Allocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.allocate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      distribute(args: MethodArgs<'distribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.distribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      beforeDistribute(args: MethodArgs<'beforeDistribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.beforeDistribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      afterDistribute(args: MethodArgs<'afterDistribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.afterDistribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      distribute(args: MethodArgs<'Distribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.distribute(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPayOut(args: MethodArgs<'getPayOut(address,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPayOut(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BaseStrategyComposer
  }
}
export type BaseStrategyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initializeVariables(address,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initializeVariables(args: MethodArgs<'initializeVariables(address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'initializeVariables(address,string)void'>]>

  /**
   * Calls the getAlloContractId()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAlloContractId(args: MethodArgs<'getAlloContractId()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'getAlloContractId()address'>]>

  /**
   * Calls the getPoolId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolId(args: MethodArgs<'getPoolId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'getPoolId()uint64'>]>

  /**
   * Calls the getStrategyId()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStrategyId(args: MethodArgs<'getStrategyId()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'getStrategyId()string'>]>

  /**
   * Calls the getPoolAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolAmount(args: MethodArgs<'getPoolAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'getPoolAmount()uint64'>]>

  /**
   * Calls the isPoolActive()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isPoolActive(args: MethodArgs<'isPoolActive()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'isPoolActive()bool'>]>

  /**
   * Calls the baseStrategy_init(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  baseStrategyInit(args: MethodArgs<'baseStrategy_init(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'baseStrategy_init(uint64)void'>]>

  /**
   * Calls the increasePoolAmount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  increasePoolAmount(args: MethodArgs<'increasePoolAmount(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'increasePoolAmount(uint64)void'>]>

  /**
   * Calls the registerRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerRecipient(args: MethodArgs<'registerRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'registerRecipient(byte[],account)void'>]>

  /**
   * Calls the beforeRegisterRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  beforeRegisterRecipient(args: MethodArgs<'beforeRegisterRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'beforeRegisterRecipient(byte[],account)void'>]>

  /**
   * Calls the afterRegisterRecipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  afterRegisterRecipient(args: MethodArgs<'afterRegisterRecipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'afterRegisterRecipient(byte[],account)void'>]>

  /**
   * Calls the register_Recipient(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerRecipient(args: MethodArgs<'register_Recipient(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'register_Recipient(byte[],account)void'>]>

  /**
   * Calls the allocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  allocate(args: MethodArgs<'allocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'allocate(byte[],account)void'>]>

  /**
   * Calls the beforeAllocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  beforeAllocate(args: MethodArgs<'beforeAllocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'beforeAllocate(byte[],account)void'>]>

  /**
   * Calls the afterAllocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  afterAllocate(args: MethodArgs<'afterAllocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'afterAllocate(byte[],account)void'>]>

  /**
   * Calls the Allocate(byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  allocate(args: MethodArgs<'Allocate(byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'Allocate(byte[],account)void'>]>

  /**
   * Calls the distribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distribute(args: MethodArgs<'distribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'distribute(address[],byte[],account)void'>]>

  /**
   * Calls the beforeDistribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  beforeDistribute(args: MethodArgs<'beforeDistribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'beforeDistribute(address[],byte[],account)void'>]>

  /**
   * Calls the afterDistribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  afterDistribute(args: MethodArgs<'afterDistribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'afterDistribute(address[],byte[],account)void'>]>

  /**
   * Calls the Distribute(address[],byte[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distribute(args: MethodArgs<'Distribute(address[],byte[],account)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'Distribute(address[],byte[],account)void'>]>

  /**
   * Calls the getPayOut(address,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPayOut(args: MethodArgs<'getPayOut(address,byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, MethodReturn<'getPayOut(address,byte[])void'>]>

  /**
   * Makes a clear_state call to an existing instance of the BaseStrategy smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BaseStrategyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BaseStrategyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BaseStrategyComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BaseStrategyComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BaseStrategyComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BaseStrategyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
